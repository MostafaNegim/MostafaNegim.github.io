{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"Hello from Mostafa <p>I am currently work as a DevOps Engineer at Snapp.</p>"},{"location":"about/","title":"1","text":""},{"location":"about/about/","title":"About","text":""},{"location":"algorithms/leetcode/Majority-Element/","title":"169. Majority Element","text":"<p>Given an array nums of size n, return the majority element.</p> <p>The majority element is the element that appears more than <code>\u230an / 2\u230b</code> times. You may assume that the majority element always exists in the array.</p> <p>Example 1:</p> <p>Input: <code>nums = [3,2,3]</code>     Output: 3  </p> <p>Example 2:</p> <p>Input: <code>nums = [2,2,1,1,1,2,2]</code>     Output: 2</p> <p>Constraints:</p> <ul> <li><code>n == nums.length</code></li> <li><code>1 &lt;= n &lt;= 5 * 104</code></li> <li><code>-109 &lt;= nums[i] &lt;= 109</code></li> </ul> <p>Follow-up: Could you solve the problem in linear time and in <code>O(1)</code> space?</p>"},{"location":"blog/general/add-your-site/","title":"How to publish your own site on Github with your domain?","text":""},{"location":"blog/k8s/how-to-add-custom-dns-a-record/","title":"Is there a way to add a custom dns a record in kubernetes?","text":""},{"location":"data-structure/linked-list/","title":"Linked List","text":"<pre><code>package linked_list\n\nimport \"fmt\"\n\ntype Node struct {\n    Value int\n    Next  *Node\n}\n\ntype LinkedList struct {\n    Head *Node\n}\n\nfunc (ll *LinkedList) Print() {\n    if ll.Head == nil {\n        fmt.Println(\"[]\")\n        return\n    }\n    fmt.Printf(\"[\")\n    ll.IterateList(func(v int) {\n        fmt.Printf(\" %d -&gt;\", v)\n    })\n    fmt.Printf(\"]\\n\")\n}\n\nfunc (ll *LinkedList) AddToHead(value int) {\n    newHead := Node{\n        Value: value,\n        Next:  nil,\n    }\n    if ll.Head != nil {\n        newHead.Next = ll.Head\n    }\n    ll.Head = &amp;newHead\n}\n\nfunc (ll *LinkedList) AddToEnd(value int) {\n    var last = &amp;Node{\n        Value: value,\n    }\n    lastNode := ll.LastNode()\n    if lastNode != nil {\n        lastNode.Next = last\n    } else {\n        // List is empty\n        ll.Head = last\n    }\n}\n\nfunc (ll *LinkedList) IterateList(fn func(v int)) {\n    for node := ll.Head; node != nil; node = node.Next {\n        fn(node.Value)\n    }\n}\n\nfunc (ll *LinkedList) LastNode() *Node {\n    var lastNode *Node\n    for node := ll.Head; node != nil; node = node.Next {\n        if node.Next == nil {\n            lastNode = node\n        }\n    }\n    return lastNode\n}\nfunc (ll *LinkedList) Length() int {\n    var count = 0\n    ll.IterateList(func(v int) { count++ })\n    return count\n}\n\nfunc (ll *LinkedList) NodeWithValue(value int) *Node {\n    for node := ll.Head; node != nil; node = node.Next {\n        if node.Value == value {\n            return node\n        }\n    }\n    return nil\n}\n\nfunc (ll *LinkedList) AddAfter(nodeProperty, value int) {\n    node := ll.NodeWithValue(nodeProperty)\n\n    newNode := &amp;Node{\n        Value: value,\n        Next: node.Next,\n    }\n    node.Next = newNode\n}\n</code></pre>"}]}